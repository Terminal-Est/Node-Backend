/*
 * Speech to Text API v3.0
 * Speech to Text API v3.0.
 *
 * OpenAPI spec version: v3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.41
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpeechToTextApiV30);
  }
}(this, function(expect, SpeechToTextApiV30) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('WebHookEvents1', function() {
      beforeEach(function() {
        instance = new SpeechToTextApiV30.WebHookEvents1();
      });

      it('should create an instance of WebHookEvents1', function() {
        // TODO: update the code to test WebHookEvents1
        expect(instance).to.be.a(SpeechToTextApiV30.WebHookEvents1);
      });

      it('should have the property datasetDeletion (base name: "datasetDeletion")', function() {
        // TODO: update the code to test the property datasetDeletion
        expect(instance).to.have.property('datasetDeletion');
        // expect(instance.datasetDeletion).to.be(expectedValueLiteral);
      });

      it('should have the property datasetCreation (base name: "datasetCreation")', function() {
        // TODO: update the code to test the property datasetCreation
        expect(instance).to.have.property('datasetCreation');
        // expect(instance.datasetCreation).to.be(expectedValueLiteral);
      });

      it('should have the property datasetProcessing (base name: "datasetProcessing")', function() {
        // TODO: update the code to test the property datasetProcessing
        expect(instance).to.have.property('datasetProcessing');
        // expect(instance.datasetProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property datasetCompletion (base name: "datasetCompletion")', function() {
        // TODO: update the code to test the property datasetCompletion
        expect(instance).to.have.property('datasetCompletion');
        // expect(instance.datasetCompletion).to.be(expectedValueLiteral);
      });

      it('should have the property modelCreation (base name: "modelCreation")', function() {
        // TODO: update the code to test the property modelCreation
        expect(instance).to.have.property('modelCreation');
        // expect(instance.modelCreation).to.be(expectedValueLiteral);
      });

      it('should have the property modelProcessing (base name: "modelProcessing")', function() {
        // TODO: update the code to test the property modelProcessing
        expect(instance).to.have.property('modelProcessing');
        // expect(instance.modelProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property modelCompletion (base name: "modelCompletion")', function() {
        // TODO: update the code to test the property modelCompletion
        expect(instance).to.have.property('modelCompletion');
        // expect(instance.modelCompletion).to.be(expectedValueLiteral);
      });

      it('should have the property modelDeletion (base name: "modelDeletion")', function() {
        // TODO: update the code to test the property modelDeletion
        expect(instance).to.have.property('modelDeletion');
        // expect(instance.modelDeletion).to.be(expectedValueLiteral);
      });

      it('should have the property evaluationCreation (base name: "evaluationCreation")', function() {
        // TODO: update the code to test the property evaluationCreation
        expect(instance).to.have.property('evaluationCreation');
        // expect(instance.evaluationCreation).to.be(expectedValueLiteral);
      });

      it('should have the property evaluationProcessing (base name: "evaluationProcessing")', function() {
        // TODO: update the code to test the property evaluationProcessing
        expect(instance).to.have.property('evaluationProcessing');
        // expect(instance.evaluationProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property evaluationCompletion (base name: "evaluationCompletion")', function() {
        // TODO: update the code to test the property evaluationCompletion
        expect(instance).to.have.property('evaluationCompletion');
        // expect(instance.evaluationCompletion).to.be(expectedValueLiteral);
      });

      it('should have the property evaluationDeletion (base name: "evaluationDeletion")', function() {
        // TODO: update the code to test the property evaluationDeletion
        expect(instance).to.have.property('evaluationDeletion');
        // expect(instance.evaluationDeletion).to.be(expectedValueLiteral);
      });

      it('should have the property transcriptionCreation (base name: "transcriptionCreation")', function() {
        // TODO: update the code to test the property transcriptionCreation
        expect(instance).to.have.property('transcriptionCreation');
        // expect(instance.transcriptionCreation).to.be(expectedValueLiteral);
      });

      it('should have the property transcriptionProcessing (base name: "transcriptionProcessing")', function() {
        // TODO: update the code to test the property transcriptionProcessing
        expect(instance).to.have.property('transcriptionProcessing');
        // expect(instance.transcriptionProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property transcriptionCompletion (base name: "transcriptionCompletion")', function() {
        // TODO: update the code to test the property transcriptionCompletion
        expect(instance).to.have.property('transcriptionCompletion');
        // expect(instance.transcriptionCompletion).to.be(expectedValueLiteral);
      });

      it('should have the property transcriptionDeletion (base name: "transcriptionDeletion")', function() {
        // TODO: update the code to test the property transcriptionDeletion
        expect(instance).to.have.property('transcriptionDeletion');
        // expect(instance.transcriptionDeletion).to.be(expectedValueLiteral);
      });

      it('should have the property endpointCreation (base name: "endpointCreation")', function() {
        // TODO: update the code to test the property endpointCreation
        expect(instance).to.have.property('endpointCreation');
        // expect(instance.endpointCreation).to.be(expectedValueLiteral);
      });

      it('should have the property endpointProcessing (base name: "endpointProcessing")', function() {
        // TODO: update the code to test the property endpointProcessing
        expect(instance).to.have.property('endpointProcessing');
        // expect(instance.endpointProcessing).to.be(expectedValueLiteral);
      });

      it('should have the property endpointCompletion (base name: "endpointCompletion")', function() {
        // TODO: update the code to test the property endpointCompletion
        expect(instance).to.have.property('endpointCompletion');
        // expect(instance.endpointCompletion).to.be(expectedValueLiteral);
      });

      it('should have the property endpointDeletion (base name: "endpointDeletion")', function() {
        // TODO: update the code to test the property endpointDeletion
        expect(instance).to.have.property('endpointDeletion');
        // expect(instance.endpointDeletion).to.be(expectedValueLiteral);
      });

      it('should have the property ping (base name: "ping")', function() {
        // TODO: update the code to test the property ping
        expect(instance).to.have.property('ping');
        // expect(instance.ping).to.be(expectedValueLiteral);
      });

      it('should have the property challenge (base name: "challenge")', function() {
        // TODO: update the code to test the property challenge
        expect(instance).to.have.property('challenge');
        // expect(instance.challenge).to.be(expectedValueLiteral);
      });

    });
  });

}));
